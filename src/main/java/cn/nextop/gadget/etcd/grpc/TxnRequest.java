// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

package cn.nextop.gadget.etcd.grpc;

/**
 * <pre>
 * From google paxosdb paper:
 * Our implementation hinges around a powerful primitive which we call MultiOp. All other database
 * operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically
 * and consists of three components:
 * 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check
 * for the absence or presence of a value, or compare with a given value. Two different tests in the guard
 * may apply to the same or different entries in the database. All tests in the guard are applied and
 * MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise
 * it executes f op (see item 3 below).
 * 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or
 * lookup operation, and applies to a single database entry. Two different operations in the list may apply
 * to the same or different entries in the database. These operations are executed
 * if guard evaluates to
 * true.
 * 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
 * </pre>
 *
 * Protobuf type {@code etcdserverpb.TxnRequest}
 */
@SuppressWarnings("all") public final class TxnRequest extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:etcdserverpb.TxnRequest)
    TxnRequestOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TxnRequest.newBuilder() to construct.
  private TxnRequest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TxnRequest() {
    compare_ = java.util.Collections.emptyList();
    success_ = java.util.Collections.emptyList();
    failure_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TxnRequest(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
              compare_ = new java.util.ArrayList<cn.nextop.gadget.etcd.grpc.Compare>();
              mutable_bitField0_ |= 0x00000001;
            }
            compare_.add(
                input.readMessage(cn.nextop.gadget.etcd.grpc.Compare.parser(), extensionRegistry));
            break;
          }
          case 18: {
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              success_ = new java.util.ArrayList<cn.nextop.gadget.etcd.grpc.RequestOp>();
              mutable_bitField0_ |= 0x00000002;
            }
            success_.add(
                input.readMessage(cn.nextop.gadget.etcd.grpc.RequestOp.parser(), extensionRegistry));
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              failure_ = new java.util.ArrayList<cn.nextop.gadget.etcd.grpc.RequestOp>();
              mutable_bitField0_ |= 0x00000004;
            }
            failure_.add(
                input.readMessage(cn.nextop.gadget.etcd.grpc.RequestOp.parser(), extensionRegistry));
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
        compare_ = java.util.Collections.unmodifiableList(compare_);
      }
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        success_ = java.util.Collections.unmodifiableList(success_);
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        failure_ = java.util.Collections.unmodifiableList(failure_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return cn.nextop.gadget.etcd.grpc.JetcdProto.internal_static_etcdserverpb_TxnRequest_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return cn.nextop.gadget.etcd.grpc.JetcdProto.internal_static_etcdserverpb_TxnRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            cn.nextop.gadget.etcd.grpc.TxnRequest.class, cn.nextop.gadget.etcd.grpc.TxnRequest.Builder.class);
  }

  public static final int COMPARE_FIELD_NUMBER = 1;
  private java.util.List<cn.nextop.gadget.etcd.grpc.Compare> compare_;
  /**
   * <pre>
   * compare is a list of predicates representing a conjunction of terms.
   * If the comparisons succeed, then the success requests will be processed in order,
   * and the response will contain their respective responses in order.
   * If the comparisons fail, then the failure requests will be processed in order,
   * and the response will contain their respective responses in order.
   * </pre>
   *
   * <code>repeated .etcdserverpb.Compare compare = 1;</code>
   */
  public java.util.List<cn.nextop.gadget.etcd.grpc.Compare> getCompareList() {
    return compare_;
  }
  /**
   * <pre>
   * compare is a list of predicates representing a conjunction of terms.
   * If the comparisons succeed, then the success requests will be processed in order,
   * and the response will contain their respective responses in order.
   * If the comparisons fail, then the failure requests will be processed in order,
   * and the response will contain their respective responses in order.
   * </pre>
   *
   * <code>repeated .etcdserverpb.Compare compare = 1;</code>
   */
  public java.util.List<? extends cn.nextop.gadget.etcd.grpc.CompareOrBuilder> 
      getCompareOrBuilderList() {
    return compare_;
  }
  /**
   * <pre>
   * compare is a list of predicates representing a conjunction of terms.
   * If the comparisons succeed, then the success requests will be processed in order,
   * and the response will contain their respective responses in order.
   * If the comparisons fail, then the failure requests will be processed in order,
   * and the response will contain their respective responses in order.
   * </pre>
   *
   * <code>repeated .etcdserverpb.Compare compare = 1;</code>
   */
  public int getCompareCount() {
    return compare_.size();
  }
  /**
   * <pre>
   * compare is a list of predicates representing a conjunction of terms.
   * If the comparisons succeed, then the success requests will be processed in order,
   * and the response will contain their respective responses in order.
   * If the comparisons fail, then the failure requests will be processed in order,
   * and the response will contain their respective responses in order.
   * </pre>
   *
   * <code>repeated .etcdserverpb.Compare compare = 1;</code>
   */
  public cn.nextop.gadget.etcd.grpc.Compare getCompare(int index) {
    return compare_.get(index);
  }
  /**
   * <pre>
   * compare is a list of predicates representing a conjunction of terms.
   * If the comparisons succeed, then the success requests will be processed in order,
   * and the response will contain their respective responses in order.
   * If the comparisons fail, then the failure requests will be processed in order,
   * and the response will contain their respective responses in order.
   * </pre>
   *
   * <code>repeated .etcdserverpb.Compare compare = 1;</code>
   */
  public cn.nextop.gadget.etcd.grpc.CompareOrBuilder getCompareOrBuilder(
      int index) {
    return compare_.get(index);
  }

  public static final int SUCCESS_FIELD_NUMBER = 2;
  private java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp> success_;
  /**
   * <pre>
   * success is a list of requests which will be applied when compare evaluates to true.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
   */
  public java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp> getSuccessList() {
    return success_;
  }
  /**
   * <pre>
   * success is a list of requests which will be applied when compare evaluates to true.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
   */
  public java.util.List<? extends cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder> 
      getSuccessOrBuilderList() {
    return success_;
  }
  /**
   * <pre>
   * success is a list of requests which will be applied when compare evaluates to true.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
   */
  public int getSuccessCount() {
    return success_.size();
  }
  /**
   * <pre>
   * success is a list of requests which will be applied when compare evaluates to true.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
   */
  public cn.nextop.gadget.etcd.grpc.RequestOp getSuccess(int index) {
    return success_.get(index);
  }
  /**
   * <pre>
   * success is a list of requests which will be applied when compare evaluates to true.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
   */
  public cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder getSuccessOrBuilder(
      int index) {
    return success_.get(index);
  }

  public static final int FAILURE_FIELD_NUMBER = 3;
  private java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp> failure_;
  /**
   * <pre>
   * failure is a list of requests which will be applied when compare evaluates to false.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
   */
  public java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp> getFailureList() {
    return failure_;
  }
  /**
   * <pre>
   * failure is a list of requests which will be applied when compare evaluates to false.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
   */
  public java.util.List<? extends cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder> 
      getFailureOrBuilderList() {
    return failure_;
  }
  /**
   * <pre>
   * failure is a list of requests which will be applied when compare evaluates to false.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
   */
  public int getFailureCount() {
    return failure_.size();
  }
  /**
   * <pre>
   * failure is a list of requests which will be applied when compare evaluates to false.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
   */
  public cn.nextop.gadget.etcd.grpc.RequestOp getFailure(int index) {
    return failure_.get(index);
  }
  /**
   * <pre>
   * failure is a list of requests which will be applied when compare evaluates to false.
   * </pre>
   *
   * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
   */
  public cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder getFailureOrBuilder(
      int index) {
    return failure_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < compare_.size(); i++) {
      output.writeMessage(1, compare_.get(i));
    }
    for (int i = 0; i < success_.size(); i++) {
      output.writeMessage(2, success_.get(i));
    }
    for (int i = 0; i < failure_.size(); i++) {
      output.writeMessage(3, failure_.get(i));
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < compare_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, compare_.get(i));
    }
    for (int i = 0; i < success_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, success_.get(i));
    }
    for (int i = 0; i < failure_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, failure_.get(i));
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof cn.nextop.gadget.etcd.grpc.TxnRequest)) {
      return super.equals(obj);
    }
    cn.nextop.gadget.etcd.grpc.TxnRequest other = (cn.nextop.gadget.etcd.grpc.TxnRequest) obj;

    boolean result = true;
    result = result && getCompareList()
        .equals(other.getCompareList());
    result = result && getSuccessList()
        .equals(other.getSuccessList());
    result = result && getFailureList()
        .equals(other.getFailureList());
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getCompareCount() > 0) {
      hash = (37 * hash) + COMPARE_FIELD_NUMBER;
      hash = (53 * hash) + getCompareList().hashCode();
    }
    if (getSuccessCount() > 0) {
      hash = (37 * hash) + SUCCESS_FIELD_NUMBER;
      hash = (53 * hash) + getSuccessList().hashCode();
    }
    if (getFailureCount() > 0) {
      hash = (37 * hash) + FAILURE_FIELD_NUMBER;
      hash = (53 * hash) + getFailureList().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static cn.nextop.gadget.etcd.grpc.TxnRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(cn.nextop.gadget.etcd.grpc.TxnRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * From google paxosdb paper:
   * Our implementation hinges around a powerful primitive which we call MultiOp. All other database
   * operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically
   * and consists of three components:
   * 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check
   * for the absence or presence of a value, or compare with a given value. Two different tests in the guard
   * may apply to the same or different entries in the database. All tests in the guard are applied and
   * MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise
   * it executes f op (see item 3 below).
   * 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or
   * lookup operation, and applies to a single database entry. Two different operations in the list may apply
   * to the same or different entries in the database. These operations are executed
   * if guard evaluates to
   * true.
   * 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
   * </pre>
   *
   * Protobuf type {@code etcdserverpb.TxnRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:etcdserverpb.TxnRequest)
      cn.nextop.gadget.etcd.grpc.TxnRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cn.nextop.gadget.etcd.grpc.JetcdProto.internal_static_etcdserverpb_TxnRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cn.nextop.gadget.etcd.grpc.JetcdProto.internal_static_etcdserverpb_TxnRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cn.nextop.gadget.etcd.grpc.TxnRequest.class, cn.nextop.gadget.etcd.grpc.TxnRequest.Builder.class);
    }

    // Construct using cn.nextop.gadget.etcd.grpc.TxnRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getCompareFieldBuilder();
        getSuccessFieldBuilder();
        getFailureFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (compareBuilder_ == null) {
        compare_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
      } else {
        compareBuilder_.clear();
      }
      if (successBuilder_ == null) {
        success_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
      } else {
        successBuilder_.clear();
      }
      if (failureBuilder_ == null) {
        failure_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        failureBuilder_.clear();
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return cn.nextop.gadget.etcd.grpc.JetcdProto.internal_static_etcdserverpb_TxnRequest_descriptor;
    }

    public cn.nextop.gadget.etcd.grpc.TxnRequest getDefaultInstanceForType() {
      return cn.nextop.gadget.etcd.grpc.TxnRequest.getDefaultInstance();
    }

    public cn.nextop.gadget.etcd.grpc.TxnRequest build() {
      cn.nextop.gadget.etcd.grpc.TxnRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public cn.nextop.gadget.etcd.grpc.TxnRequest buildPartial() {
      cn.nextop.gadget.etcd.grpc.TxnRequest result = new cn.nextop.gadget.etcd.grpc.TxnRequest(this);
      int from_bitField0_ = bitField0_;
      if (compareBuilder_ == null) {
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          compare_ = java.util.Collections.unmodifiableList(compare_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.compare_ = compare_;
      } else {
        result.compare_ = compareBuilder_.build();
      }
      if (successBuilder_ == null) {
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          success_ = java.util.Collections.unmodifiableList(success_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.success_ = success_;
      } else {
        result.success_ = successBuilder_.build();
      }
      if (failureBuilder_ == null) {
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          failure_ = java.util.Collections.unmodifiableList(failure_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.failure_ = failure_;
      } else {
        result.failure_ = failureBuilder_.build();
      }
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof cn.nextop.gadget.etcd.grpc.TxnRequest) {
        return mergeFrom((cn.nextop.gadget.etcd.grpc.TxnRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(cn.nextop.gadget.etcd.grpc.TxnRequest other) {
      if (other == cn.nextop.gadget.etcd.grpc.TxnRequest.getDefaultInstance()) return this;
      if (compareBuilder_ == null) {
        if (!other.compare_.isEmpty()) {
          if (compare_.isEmpty()) {
            compare_ = other.compare_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureCompareIsMutable();
            compare_.addAll(other.compare_);
          }
          onChanged();
        }
      } else {
        if (!other.compare_.isEmpty()) {
          if (compareBuilder_.isEmpty()) {
            compareBuilder_.dispose();
            compareBuilder_ = null;
            compare_ = other.compare_;
            bitField0_ = (bitField0_ & ~0x00000001);
            compareBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getCompareFieldBuilder() : null;
          } else {
            compareBuilder_.addAllMessages(other.compare_);
          }
        }
      }
      if (successBuilder_ == null) {
        if (!other.success_.isEmpty()) {
          if (success_.isEmpty()) {
            success_ = other.success_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureSuccessIsMutable();
            success_.addAll(other.success_);
          }
          onChanged();
        }
      } else {
        if (!other.success_.isEmpty()) {
          if (successBuilder_.isEmpty()) {
            successBuilder_.dispose();
            successBuilder_ = null;
            success_ = other.success_;
            bitField0_ = (bitField0_ & ~0x00000002);
            successBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getSuccessFieldBuilder() : null;
          } else {
            successBuilder_.addAllMessages(other.success_);
          }
        }
      }
      if (failureBuilder_ == null) {
        if (!other.failure_.isEmpty()) {
          if (failure_.isEmpty()) {
            failure_ = other.failure_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureFailureIsMutable();
            failure_.addAll(other.failure_);
          }
          onChanged();
        }
      } else {
        if (!other.failure_.isEmpty()) {
          if (failureBuilder_.isEmpty()) {
            failureBuilder_.dispose();
            failureBuilder_ = null;
            failure_ = other.failure_;
            bitField0_ = (bitField0_ & ~0x00000004);
            failureBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getFailureFieldBuilder() : null;
          } else {
            failureBuilder_.addAllMessages(other.failure_);
          }
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      cn.nextop.gadget.etcd.grpc.TxnRequest parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (cn.nextop.gadget.etcd.grpc.TxnRequest) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private java.util.List<cn.nextop.gadget.etcd.grpc.Compare> compare_ =
      java.util.Collections.emptyList();
    private void ensureCompareIsMutable() {
      if (!((bitField0_ & 0x00000001) == 0x00000001)) {
        compare_ = new java.util.ArrayList<cn.nextop.gadget.etcd.grpc.Compare>(compare_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        cn.nextop.gadget.etcd.grpc.Compare, cn.nextop.gadget.etcd.grpc.Compare.Builder, cn.nextop.gadget.etcd.grpc.CompareOrBuilder> compareBuilder_;

    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public java.util.List<cn.nextop.gadget.etcd.grpc.Compare> getCompareList() {
      if (compareBuilder_ == null) {
        return java.util.Collections.unmodifiableList(compare_);
      } else {
        return compareBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public int getCompareCount() {
      if (compareBuilder_ == null) {
        return compare_.size();
      } else {
        return compareBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public cn.nextop.gadget.etcd.grpc.Compare getCompare(int index) {
      if (compareBuilder_ == null) {
        return compare_.get(index);
      } else {
        return compareBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder setCompare(
        int index, cn.nextop.gadget.etcd.grpc.Compare value) {
      if (compareBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCompareIsMutable();
        compare_.set(index, value);
        onChanged();
      } else {
        compareBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder setCompare(
        int index, cn.nextop.gadget.etcd.grpc.Compare.Builder builderForValue) {
      if (compareBuilder_ == null) {
        ensureCompareIsMutable();
        compare_.set(index, builderForValue.build());
        onChanged();
      } else {
        compareBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder addCompare(cn.nextop.gadget.etcd.grpc.Compare value) {
      if (compareBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCompareIsMutable();
        compare_.add(value);
        onChanged();
      } else {
        compareBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder addCompare(
        int index, cn.nextop.gadget.etcd.grpc.Compare value) {
      if (compareBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureCompareIsMutable();
        compare_.add(index, value);
        onChanged();
      } else {
        compareBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder addCompare(
        cn.nextop.gadget.etcd.grpc.Compare.Builder builderForValue) {
      if (compareBuilder_ == null) {
        ensureCompareIsMutable();
        compare_.add(builderForValue.build());
        onChanged();
      } else {
        compareBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder addCompare(
        int index, cn.nextop.gadget.etcd.grpc.Compare.Builder builderForValue) {
      if (compareBuilder_ == null) {
        ensureCompareIsMutable();
        compare_.add(index, builderForValue.build());
        onChanged();
      } else {
        compareBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder addAllCompare(
        java.lang.Iterable<? extends cn.nextop.gadget.etcd.grpc.Compare> values) {
      if (compareBuilder_ == null) {
        ensureCompareIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, compare_);
        onChanged();
      } else {
        compareBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder clearCompare() {
      if (compareBuilder_ == null) {
        compare_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        compareBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public Builder removeCompare(int index) {
      if (compareBuilder_ == null) {
        ensureCompareIsMutable();
        compare_.remove(index);
        onChanged();
      } else {
        compareBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public cn.nextop.gadget.etcd.grpc.Compare.Builder getCompareBuilder(
        int index) {
      return getCompareFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public cn.nextop.gadget.etcd.grpc.CompareOrBuilder getCompareOrBuilder(
        int index) {
      if (compareBuilder_ == null) {
        return compare_.get(index);  } else {
        return compareBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public java.util.List<? extends cn.nextop.gadget.etcd.grpc.CompareOrBuilder> 
         getCompareOrBuilderList() {
      if (compareBuilder_ != null) {
        return compareBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(compare_);
      }
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public cn.nextop.gadget.etcd.grpc.Compare.Builder addCompareBuilder() {
      return getCompareFieldBuilder().addBuilder(
          cn.nextop.gadget.etcd.grpc.Compare.getDefaultInstance());
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public cn.nextop.gadget.etcd.grpc.Compare.Builder addCompareBuilder(
        int index) {
      return getCompareFieldBuilder().addBuilder(
          index, cn.nextop.gadget.etcd.grpc.Compare.getDefaultInstance());
    }
    /**
     * <pre>
     * compare is a list of predicates representing a conjunction of terms.
     * If the comparisons succeed, then the success requests will be processed in order,
     * and the response will contain their respective responses in order.
     * If the comparisons fail, then the failure requests will be processed in order,
     * and the response will contain their respective responses in order.
     * </pre>
     *
     * <code>repeated .etcdserverpb.Compare compare = 1;</code>
     */
    public java.util.List<cn.nextop.gadget.etcd.grpc.Compare.Builder> 
         getCompareBuilderList() {
      return getCompareFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        cn.nextop.gadget.etcd.grpc.Compare, cn.nextop.gadget.etcd.grpc.Compare.Builder, cn.nextop.gadget.etcd.grpc.CompareOrBuilder> 
        getCompareFieldBuilder() {
      if (compareBuilder_ == null) {
        compareBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            cn.nextop.gadget.etcd.grpc.Compare, cn.nextop.gadget.etcd.grpc.Compare.Builder, cn.nextop.gadget.etcd.grpc.CompareOrBuilder>(
                compare_,
                ((bitField0_ & 0x00000001) == 0x00000001),
                getParentForChildren(),
                isClean());
        compare_ = null;
      }
      return compareBuilder_;
    }

    private java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp> success_ =
      java.util.Collections.emptyList();
    private void ensureSuccessIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        success_ = new java.util.ArrayList<cn.nextop.gadget.etcd.grpc.RequestOp>(success_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        cn.nextop.gadget.etcd.grpc.RequestOp, cn.nextop.gadget.etcd.grpc.RequestOp.Builder, cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder> successBuilder_;

    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp> getSuccessList() {
      if (successBuilder_ == null) {
        return java.util.Collections.unmodifiableList(success_);
      } else {
        return successBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public int getSuccessCount() {
      if (successBuilder_ == null) {
        return success_.size();
      } else {
        return successBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOp getSuccess(int index) {
      if (successBuilder_ == null) {
        return success_.get(index);
      } else {
        return successBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder setSuccess(
        int index, cn.nextop.gadget.etcd.grpc.RequestOp value) {
      if (successBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSuccessIsMutable();
        success_.set(index, value);
        onChanged();
      } else {
        successBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder setSuccess(
        int index, cn.nextop.gadget.etcd.grpc.RequestOp.Builder builderForValue) {
      if (successBuilder_ == null) {
        ensureSuccessIsMutable();
        success_.set(index, builderForValue.build());
        onChanged();
      } else {
        successBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder addSuccess(cn.nextop.gadget.etcd.grpc.RequestOp value) {
      if (successBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSuccessIsMutable();
        success_.add(value);
        onChanged();
      } else {
        successBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder addSuccess(
        int index, cn.nextop.gadget.etcd.grpc.RequestOp value) {
      if (successBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSuccessIsMutable();
        success_.add(index, value);
        onChanged();
      } else {
        successBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder addSuccess(
        cn.nextop.gadget.etcd.grpc.RequestOp.Builder builderForValue) {
      if (successBuilder_ == null) {
        ensureSuccessIsMutable();
        success_.add(builderForValue.build());
        onChanged();
      } else {
        successBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder addSuccess(
        int index, cn.nextop.gadget.etcd.grpc.RequestOp.Builder builderForValue) {
      if (successBuilder_ == null) {
        ensureSuccessIsMutable();
        success_.add(index, builderForValue.build());
        onChanged();
      } else {
        successBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder addAllSuccess(
        java.lang.Iterable<? extends cn.nextop.gadget.etcd.grpc.RequestOp> values) {
      if (successBuilder_ == null) {
        ensureSuccessIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, success_);
        onChanged();
      } else {
        successBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder clearSuccess() {
      if (successBuilder_ == null) {
        success_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        successBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public Builder removeSuccess(int index) {
      if (successBuilder_ == null) {
        ensureSuccessIsMutable();
        success_.remove(index);
        onChanged();
      } else {
        successBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOp.Builder getSuccessBuilder(
        int index) {
      return getSuccessFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder getSuccessOrBuilder(
        int index) {
      if (successBuilder_ == null) {
        return success_.get(index);  } else {
        return successBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public java.util.List<? extends cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder> 
         getSuccessOrBuilderList() {
      if (successBuilder_ != null) {
        return successBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(success_);
      }
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOp.Builder addSuccessBuilder() {
      return getSuccessFieldBuilder().addBuilder(
          cn.nextop.gadget.etcd.grpc.RequestOp.getDefaultInstance());
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOp.Builder addSuccessBuilder(
        int index) {
      return getSuccessFieldBuilder().addBuilder(
          index, cn.nextop.gadget.etcd.grpc.RequestOp.getDefaultInstance());
    }
    /**
     * <pre>
     * success is a list of requests which will be applied when compare evaluates to true.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp success = 2;</code>
     */
    public java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp.Builder> 
         getSuccessBuilderList() {
      return getSuccessFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        cn.nextop.gadget.etcd.grpc.RequestOp, cn.nextop.gadget.etcd.grpc.RequestOp.Builder, cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder> 
        getSuccessFieldBuilder() {
      if (successBuilder_ == null) {
        successBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            cn.nextop.gadget.etcd.grpc.RequestOp, cn.nextop.gadget.etcd.grpc.RequestOp.Builder, cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder>(
                success_,
                ((bitField0_ & 0x00000002) == 0x00000002),
                getParentForChildren(),
                isClean());
        success_ = null;
      }
      return successBuilder_;
    }

    private java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp> failure_ =
      java.util.Collections.emptyList();
    private void ensureFailureIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        failure_ = new java.util.ArrayList<cn.nextop.gadget.etcd.grpc.RequestOp>(failure_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        cn.nextop.gadget.etcd.grpc.RequestOp, cn.nextop.gadget.etcd.grpc.RequestOp.Builder, cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder> failureBuilder_;

    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp> getFailureList() {
      if (failureBuilder_ == null) {
        return java.util.Collections.unmodifiableList(failure_);
      } else {
        return failureBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public int getFailureCount() {
      if (failureBuilder_ == null) {
        return failure_.size();
      } else {
        return failureBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOp getFailure(int index) {
      if (failureBuilder_ == null) {
        return failure_.get(index);
      } else {
        return failureBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder setFailure(
        int index, cn.nextop.gadget.etcd.grpc.RequestOp value) {
      if (failureBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFailureIsMutable();
        failure_.set(index, value);
        onChanged();
      } else {
        failureBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder setFailure(
        int index, cn.nextop.gadget.etcd.grpc.RequestOp.Builder builderForValue) {
      if (failureBuilder_ == null) {
        ensureFailureIsMutable();
        failure_.set(index, builderForValue.build());
        onChanged();
      } else {
        failureBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder addFailure(cn.nextop.gadget.etcd.grpc.RequestOp value) {
      if (failureBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFailureIsMutable();
        failure_.add(value);
        onChanged();
      } else {
        failureBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder addFailure(
        int index, cn.nextop.gadget.etcd.grpc.RequestOp value) {
      if (failureBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFailureIsMutable();
        failure_.add(index, value);
        onChanged();
      } else {
        failureBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder addFailure(
        cn.nextop.gadget.etcd.grpc.RequestOp.Builder builderForValue) {
      if (failureBuilder_ == null) {
        ensureFailureIsMutable();
        failure_.add(builderForValue.build());
        onChanged();
      } else {
        failureBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder addFailure(
        int index, cn.nextop.gadget.etcd.grpc.RequestOp.Builder builderForValue) {
      if (failureBuilder_ == null) {
        ensureFailureIsMutable();
        failure_.add(index, builderForValue.build());
        onChanged();
      } else {
        failureBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder addAllFailure(
        java.lang.Iterable<? extends cn.nextop.gadget.etcd.grpc.RequestOp> values) {
      if (failureBuilder_ == null) {
        ensureFailureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, failure_);
        onChanged();
      } else {
        failureBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder clearFailure() {
      if (failureBuilder_ == null) {
        failure_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        failureBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public Builder removeFailure(int index) {
      if (failureBuilder_ == null) {
        ensureFailureIsMutable();
        failure_.remove(index);
        onChanged();
      } else {
        failureBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOp.Builder getFailureBuilder(
        int index) {
      return getFailureFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder getFailureOrBuilder(
        int index) {
      if (failureBuilder_ == null) {
        return failure_.get(index);  } else {
        return failureBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public java.util.List<? extends cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder> 
         getFailureOrBuilderList() {
      if (failureBuilder_ != null) {
        return failureBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(failure_);
      }
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOp.Builder addFailureBuilder() {
      return getFailureFieldBuilder().addBuilder(
          cn.nextop.gadget.etcd.grpc.RequestOp.getDefaultInstance());
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public cn.nextop.gadget.etcd.grpc.RequestOp.Builder addFailureBuilder(
        int index) {
      return getFailureFieldBuilder().addBuilder(
          index, cn.nextop.gadget.etcd.grpc.RequestOp.getDefaultInstance());
    }
    /**
     * <pre>
     * failure is a list of requests which will be applied when compare evaluates to false.
     * </pre>
     *
     * <code>repeated .etcdserverpb.RequestOp failure = 3;</code>
     */
    public java.util.List<cn.nextop.gadget.etcd.grpc.RequestOp.Builder> 
         getFailureBuilderList() {
      return getFailureFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        cn.nextop.gadget.etcd.grpc.RequestOp, cn.nextop.gadget.etcd.grpc.RequestOp.Builder, cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder> 
        getFailureFieldBuilder() {
      if (failureBuilder_ == null) {
        failureBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            cn.nextop.gadget.etcd.grpc.RequestOp, cn.nextop.gadget.etcd.grpc.RequestOp.Builder, cn.nextop.gadget.etcd.grpc.RequestOpOrBuilder>(
                failure_,
                ((bitField0_ & 0x00000004) == 0x00000004),
                getParentForChildren(),
                isClean());
        failure_ = null;
      }
      return failureBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:etcdserverpb.TxnRequest)
  }

  // @@protoc_insertion_point(class_scope:etcdserverpb.TxnRequest)
  private static final cn.nextop.gadget.etcd.grpc.TxnRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new cn.nextop.gadget.etcd.grpc.TxnRequest();
  }

  public static cn.nextop.gadget.etcd.grpc.TxnRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TxnRequest>
      PARSER = new com.google.protobuf.AbstractParser<TxnRequest>() {
    public TxnRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TxnRequest(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TxnRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TxnRequest> getParserForType() {
    return PARSER;
  }

  public cn.nextop.gadget.etcd.grpc.TxnRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

